const ENV = {
    CORE: "core_export_import_v1.9.0", // Версия ядра
    LOGGING_TO_MULTICUBE: { // Логгирование в МК, Описание: https://rucom.optimacros.com/topic/1864/ядро-core_export_import/5

        SCRIPT_NAME: "***", // Имя элемента в измерении скриптов

        MULTICUBE: "***", // Название МК для логироваия

        MULTICUBE_VIEW: "***", // Вью для логирования

        SCRIPT_LIST: "Scripts", // Название измерения скриптов

        SCRIPT_LIST_VIEW: null, // Вью измерения скриптов
        
        LOCALE: 'en-Us', // Название локали как в javascript
        
        LOCALE_OPTIONS: { // Опции форматирования времени для метода toLocaleString() javascript 
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',

            timeZone: 'Asia/Tomsk',

            hour: '2-digit',
            minute: '2-digit',

        },
        CUBES: { // порядок кубов и их названия во вью МК логгирования
            Date: "Date", // время (по умолчанию часовой пояс МСК)
            Status: "Status", // OK, если скрипт завершился, и ERROR, если в ходе выполнения была ошибка
            Output: "Output", // содержимое модалки отчёта скрипта (уровень вывода по умолчанию INFO, настраивается опцией SHOUTER_LOGGER_LVL рядом с опцией SHOUTER_LVL)
            Stopwatch: "Stopwatch", // время работы скрипта
            User: "User" // пользователь, запустивший скрипт
        },
    },
    SHOUTER_LVL: "***", // TRACE/DEBUG/INFO/WARNING/ERROR (Больше информации -> Меньше информации)
    SHOW_ERROR_STACK: true, // Показывает не только текст ошибки, но и call-stack
    DISABLE_LOCK_SWITCHING: true, // Управлениие блокировкой скриптов, если на WS нету колонки Lock Mode нужно отключать
    SRC : {
        TYPE: "***", 
        /*
        FILES - Загрузка файлов из сетевых папок, FTP или примонтированная папка (Например SMB/CIFS)
        LOGINOM - Экспорт JSON данных из системы Loginom используя внешний HTTP сервис
        WEB_SERVICE - Экспорт данных из любого внешнего HTTP сервиса. Используя приемник RAW_JSON, позволяет посмотреть на JSON ответ от сервиса, не пытаясь его прогонять через ETL
        ODATA - Экспорт JSON-ODATA данных используя внешний HTTP сервис
        MSSQL - Экспорт данных из Microsoft SQL Server используя SELECT запрос
        LIST - Экспорт справочника из текущей модели Optimacros
        MULTICUBE - Экспорт мультикуба из текущей модели Optimacros
        OM_MULTICUBE - Быстрый экспорт мультикуба из текущей модели Optimacros
        POSTGRESQL - Экспорт данных из PostgreSQL используя SELECT запрос
        MYSQL - Экспорт данных из MySQL используя SELECT запрос
        ORACLE - Экспорт данных из Oracle используя SELECT запрос
        */
        PARAMS: {
            NAME: "***", // Названиие МК для выгрузки, если выбран источниик MULTICUBE/OM_MULTICUBE
            VIEW: "***", // Названиие предсавления, если выбран источниик MULTICUBE/OM_MULTICUBE
            FORMULA_FILTER: `***`, // Формула для опроеделения данных, которые отдаются на экспорт, форммула пишется в формате Оптмакрос. `TRUE`, если хотим отправиить все данные.
            ROW_HEADERS: { /*При экспорте справочника из ОМ (доступно для источников LIST и MULTICUBE) позволяет экспортиировать:
                             Display Name справочников (при указании значения параметра как LABEL);
                             Item Name справочников (при указании значения параметра как  NAME);
                             Code справочника (при указании значения параметра как  CODE);
                             Пусто (при указании значения параметра как  NONE).
                            */
                SCR_TYPE: "***",
            },
            QUERY: {
                TYPE:"RAW_QUERY", //
                PARAMS: {
                    PRE_QUERY: ``, // Позволяет передать на сервер дополнительные SQL запросы до начала основного запроса.
                    VALUE: ``, // Основной SQL запрос, необходимо учитывать особенности разных СУБД
                    BINDS: ["", ""] // Позволяет передавать значения в запрос, значения подставляются вместо `?` в VALUE
                }
            },
            CONNECTION: { // Параметры подключения
                HOST: "***", // ip адресс подключения к СУБД
                PORT: 0000, // Порт подключения к СУБД
                USER: "***", // Пользоватьель
                PASSWORD: "***", // Пароль
                DB: "***", // Название СУБД к которой мы подключаемся
                SID: "" // Параметр указываемый только для ORACLE, для остальных СУБД его быть не должно
            }
        }
    },
    DEST: {
        TYPE: "***",
        /*
        CSV - Приемник позволяет представить и скачать переданные данные из источника как CSV таблицу
        JSON - Приемник позволяет представить и скачать переданные данные из источника как JSON близкий к табличному представления (на сколько это возможно). Можно использовать с большинством источников
        RAW_JSON - Приемник позволяет скачать чистый JSON от источников, которые работают с web сервисами (LOGINOM, WEB_SERVICE, ODATA)
        MULTICUBE - Импорт данных из источника в Optimacros мультикуб через обычный импорт
        LIST - Импорт данных из источника в Optimacros справочник
        LISTS - Импорт данных из источника в Optimacros справочники, по очереди, нужен для импорта в иерархии справочников
        MSSQL - Импорт данных в Microsoft SQL Server используя INSERT запросы
        MSSQL_BCP - Быстрый импорт данных в Microsoft SQL Server используя утилиту BCP
        MSSQL_DIRECT_BCP - Быстрый импорт данных в Microsoft SQL Server используя утилиту BCP с доп. оптимизациями, что делает приемник более быстрым чем MSSQL_BCP, но менее гибким в настройках
        WEB_SERVICE - Импорт JSON данных в HTTP сервис используя POST запрос
        LOGINOM - Импорт JSON данных в HTTP сервис Loginom
        POSTGRESQL - Импорт данных в PostgreSQL используя INSERT запросы
        OM_MULTICUBE - Импорт данных из источника в Optimacros мультикуб через быстрый импорт
        MYSQL - Импорт данных в MySQL используя INSERT запросы
        Сейчас есть проблемы с производительностью этого приемника, используйте приемник MYSQL_IMPORT
        MYSQL_IMPORT - Импорт данных в MySQL используя CSV файл, который формируется на основе входящих данных от источника. Быстрый и универсальный, работает с всеми типами источников (2млн строк * 4 колонки используя источник OM_MULTICUBE выгружает за ~65 секунд). Позволяет гибко задать карту связей между колонками источника и таблицей приемником, но это снижает производительность и сильно уступает в нем кейсу OM_MULTICUBE -> MYSQL_IMPORT_RAW
        MYSQL_IMPORT_RAW - Импорт данных в MySQL используя CSV файл, работает только с источником OM_MULTICUBE. Самый быстрый вариант импорта данных OLAP -> OLTP, из OM выгружается CSV файл и без дополнительного ETL сразу передается в MySQL, быстрее этого подхода для обмена данными OLAP -> OLTP на данный момент ничего нет. 
        */
        PARAMS: {
            NAME: "***", // При выборе приемника MULTICUBE/OM_MULTICUBE звполняется название МК приемника
            TRANSFORM: { // Свойства преобразования файла для импорта в ОМ
                DOWNLOAD_TRANSFORM_FILE: false, // При установке значения `true` скачивается трансформмированный файл, который импортируется в МК
                DOWNLOAD_IMPORT_REPORT_FILE: false, // При установке значения `true` скачивается отчет 
                CHARSET: "WINDOWS-1251", // UTF-8|WINDOWS-1251 выбор кодировки для CSV файла, который импортиируется в МК
                SRC_TO_DEST_COLUMN_MAP: { // Сопоставление полей источника (слева) ии полей приемнка (справа)
				"XXX":"YYY",
                "XXX":"YYY"
               },
              DIMENSIONS: { // Измерения использующиеся в МК приемнке
                    dim1: { // Блок с описанием измерения, каждый следующий блок должен называться dim2, dim2 и т.д.?
                    NAME: "***", // Название измерения
                    SRC_COLUMN_NAME: "***", // Назване колонки в источнике
                    CAN_USE_IN_CLEANER: false, // Если стоит `true` измерение используется в очистке
                    CAN_USE_NAME_COMPARISON_IN_CLEANER: false, // Если стоит `true` скрипт игнорирует ошибки импорта (например если в импорте есть элементы измерения, которых нет в справочнике)
                    ON_VALUE: {
                            TYPE: "BASE_DATE",
                            /*
                            NUM_WITH_GROUP_BY_DIMENSION - Отвечает за группировку элементов по измерениям относительно нумерованного справочника
                            NUM_WITH_GROUP_BY_DIMENSIONS - Тоже самое, что в предыдущем случае, но осуществляет группировку более чем по одному измерения
                            NUM_WITH_DATE_GROUP - Когда известно, что 100 % у мультикуба приемника два измерения: нумерованный справочник и время, то подойдет это значение. Т.е. в предыдущих случаях dim 2 могло быть измерение компаний, подразделений и т.д. В данном случае измерений обязательно должно быть два и они должны быть нумерованный справочник и время. Конструкция устаревшая и рекомендуется использовать ее замену - два кейса, описанных выше.
                            NUM - Когда в импорте только измерение нумерованного справочника и его ни с чем не надо группировать (время и другие измерения), то значение просто ставится NUM.
                            BASE_DATE - Осуществляет преобразование даты из формата 01.01.2021 в формат Jan 21 т.е. из формата Date в формат Time Period.
                            OM_DATE - Тоже самое, что предыдущий вариант, но так же обрезает пробелы т.е.
                            AS_IS - Означает, что данные из колонки источника никак не преобразовываются
                            STATIC_VALUE - Значение позволяет положить данные в импорт в определенный элемент.
                            CUSTOM_DATE - Осуществляет преобразование из нестандартного формата даты, где дни, месяца, года записаны числами (например 2023-01-01T00:00:00) в формат Jan 23 (Time Period). В параметрах: FIRST_CHAR_DAY; END_CHAR_DAY; FIRST_CHAR_MONTH; END_CHAR_MONTH; FIRST_CHAR_YEAR; END_CHAR_YEAR указываются позиции начала и конца для преобразования цифр в дату DATE (преобразуют дату в формат 01.01.2021), а затем в Time Period. 
                            Начиная с версии ядра 1.8.44 доступен параметр TIME_SCALE, который позволяет задать Time Period = Days, Months, Years при импорте в мультикуб-приёмник.
                            */
                            PARAMS: {
                                DIMENSION_ID: "***", // Измерение по которому мы группируем данные при выборе типа `NUM_WITH_GROUP_BY_DIMENSION`
                                DIMENSION_IDS: ["***", "***"], // Измерения по которым мы группируем данные при выборе типа `NUM_WITH_GROUP_BY_DIMENSIONS`
                                FIRST_CHAR_DAY: "8", // Первый символ с которого начинается день в дате при выборе типа CUSTOM_DATE
                                END_CHAR_DAY: "10", // Последний + 1 символ с которого начинается день в дате при выборе типа CUSTOM_DATE
                                FIRST_CHAR_MONTH: "5", // Первый символ с которого начинается месяц в дате при выборе типа CUSTOM_DATE
                                END_CHAR_MONTH: "7", // Последний + 1символ с которого начинается месяц в дате при выборе типа CUSTOM_DATE
                                FIRST_CHAR_YEAR: "0", // Первый символ с которого начинается год в дате при выборе типа CUSTOM_DATE
                                END_CHAR_YEAR: "4", // Последний + 1 символ с которого начинается год в дате при выборе типа CUSTOM_DATE
                                TIME_SCALE: "DAY" // DAY / MONTH / YEAR шкала времени в МК приемнике для типов: `BASE_DATE`, `CUSOM_DATE`
                            }
                        }
                    }
               },
                CUSTOM_COLUMNS: [ // Дефольный поля, которые доступны для загрузки; скрипт создает их для импорта самостоятельно т.е. в файле, ссылке их нет
                    {
                        NAME: "Название Файла", // наименование куба, можно менять / удалять
                        ON_VALUE: "SRC_FILE_NAME" 
                    },
                    {
                        NAME: "Дата Импорта", // наименование куба, можно менять / удалять
                        ON_VALUE: "DATE"
                    },
                    {
                        NAME: "Время Импорта", // наименование куба, можно менять / удалять
                        ON_VALUE: "TIME"
                    }
                ],
                SRC_COLUMN_PREPARE_DATA_MAP: {  /*Позволяет преобразовывать данные, получаемые из источника. Доступно для MULTICUBE и OM_MULTICUBE.
                                                Доступные способы обработки: DECIMAL_SEPARATOR - позволяет поменять символ разделителя числа с плавающей точкой.*/
                    "***" :[ // Наименование поля импорта
                        {
                            ON_VALUE: {
                                TYPE: "DECIMAL_SEPARATOR", // Способ обработки
                                PARAMS: {
                                    FROM: ",", // Что менять (какой разделитель в источнике)
                                    TO: "." // На что меняем
                                }
                            }
                        }
                    ]
                }
            },
            TABLE: "***", // Название таблицы для импорта в БД
            CONNECTION: { // Параметры подключения
                HOST: "***", // ip адресс подключения к СУБД
                PORT: 0000, // Порт подключения к СУБД
                USER: "***", // Пользоватьель
                PASSWORD: "***", // Пароль
                DB: "***", // Название СУБД к которой мы подключаемся
                SID: "" // Параметр указываемый только для ORACLE, для остальных СУБД его быть не должно
            },
            CLEANER: {
                STATUS: true, // При значении `true` клинер включается
                FORMAT_FORMULA_MAP: { // Карта значений которые подставляются при отчистке
                    "No Data": null,
                    "Date": `DATE("")`,
                    "Entity": `""`,
                    "Time Entity": `""`,
                    "Version": `""`,
                    "Line Item Subset": `""`,
                    "Number": `0`,
                    "Boolean": `FALSE`,
                    "Text": `""`
                }
            }
        }
    }
};
om.common.resultInfo()
    .actionsInfo()
    .makeMacrosAction(ENV.CORE)
    .appendAfter()
    .environmentInfo()
    .set('ENV', ENV);